# -*- coding:utf-8 -*-


s="글자"
print(type(s))
#모양 그대로 나오게 해주는 ""*3을하면
s2=""" 
zzz
ggg
        ddd
"""
print(s2)
print(type(s2))

#'''*3으로 사용법을 써줄수있고 그 사용법을 보고싶다면 help(보고싶은거 함수도 가능)
class dog:
    '''
        개 클래스
    '''
    def bark(self):
        '''
                짓는거
        '''
        print("mung")
help(dog)
help(print())
print("--------")
s="Java때 했던거"
print(s.startswith("J"))#'J'로 시작하나
print(s.replace("Java", "자바"))# java->자바
print(s[2])# 세번째 글자 list로 접근하는것처럼
print(len(s))# 총 글자 수
print("했던거" in s)# '했던거'가 포함되나
print(s.find("했던거"))# '했던거'가 포함되나

###############################################
s2="             자료1            "
print(s2.strip())#strip()앞뒤에 있는 띄어쓰기 없애주는


###############################################
s3="ㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂ자료2ㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂㅂ"
print(s3.strip("ㅂ"))#앞뒤에 불필요한거 없애기


###############################################
#String.format("%d",10)
s4="키:%d,몸무게:%d"%(180,80)
print(s4)
###############################################
#문자열 붙이기
#J:StringBuffer
#P:메모리 효율X
s5="가"
print(s5,id(s5))#주소가 다 다름 그만큼 heap영역에 붙일때마다 새로 만들고있다는 소리=메모리 폭발 
                #하지만 파이썬에서는 그냥 쓴다 메모리 효율에 관심X
s5+="나"
print(s5,id(s5))
s5+="다"
print(s5,id(s5))
s5+="라"
print(s5,id(s5))
s5+="마"
print(s5,id(s5))
#####################################################
#문자열 분리
#J: 
#  s6:split(",")->[]-> 정형 데이터에 유리
#  StringTokenizer->while->비정형데이터에 유리
#P:
s6="가,나,다"
s6list=s6.split(",")
for s66 in s6list:
    print(s66)

